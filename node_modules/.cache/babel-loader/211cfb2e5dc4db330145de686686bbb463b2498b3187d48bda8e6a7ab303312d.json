{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Desktop\\\\Portifolio\\\\CineTag\\\\src\\\\contextos\\\\Favoritos.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\n\n//criando contexto e designando o nome como \"Favoritos\"\n//o contexto vai ser usado pra passarmos as informações de uma página pra outra\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FavoritosContext = /*#__PURE__*/createContext();\nFavoritosContext.displayName = \"Favoritos\";\n\n//armazenando item com uma array e atualizando ela com o setFavorito\nexport default function FavoritosProvider({\n  children\n}) {\n  _s();\n  const [favorito, setFavorito] = useState([]);\n  return /*#__PURE__*/_jsxDEV(FavoritosContext.Provider, {\n    value: {\n      favorito,\n      setFavorito\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}\n\n//encapsula a lógica de gerenciamento dos favoritos\n_s(FavoritosProvider, \"uDh2KPsR8FSkvzoGTFb4X6m/zno=\");\n_c = FavoritosProvider;\nexport function useFavoritoContext() {\n  _s2();\n  //puxando o favortio e set favorito com o useContext\n  const {\n    favorito,\n    setFavorito\n  } = useContext(FavoritosContext);\n  function adicionarFavorito(novoFavorito) {\n    //verificando se há algum repetido\n    const favoritoRepetido = favorito.some(item => item.id === novoFavorito.id);\n\n    //cópia da lista atual para evitar as mudanças diretas\n    let novaLista = [...favorito];\n\n    //adiciona um item\n    if (!favoritoRepetido) {\n      novaLista.push(novoFavorito);\n      return setFavorito(novaLista);\n    }\n\n    //se o item está na lista \"favoritoRepetido\" ele é removido da lista\n    novaLista.splice(novaLista.findIndex(item => item.id === novaLista.find(item => item.id === novoFavorito.id).id), 1);\n    return setFavorito(novaLista);\n  }\n\n  //retorna um objeto contendo a lista de favoritos e a função de adicionarFavorito\n  return {\n    favorito,\n    adicionarFavorito\n  };\n}\n_s2(useFavoritoContext, \"HoHQg4IIbZ8boyzmT4R9A7lNppo=\");\nvar _c;\n$RefreshReg$(_c, \"FavoritosProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","FavoritosContext","displayName","FavoritosProvider","children","_s","favorito","setFavorito","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFavoritoContext","_s2","adicionarFavorito","novoFavorito","favoritoRepetido","some","item","id","novaLista","push","splice","findIndex","find","$RefreshReg$"],"sources":["C:/Users/gabri/Desktop/Portifolio/CineTag/src/contextos/Favoritos.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\n\r\n//criando contexto e designando o nome como \"Favoritos\"\r\n//o contexto vai ser usado pra passarmos as informações de uma página pra outra\r\nexport const FavoritosContext = createContext()\r\nFavoritosContext.displayName = \"Favoritos\"\r\n\r\n//armazenando item com uma array e atualizando ela com o setFavorito\r\nexport default function FavoritosProvider({ children }) {\r\n    const [favorito, setFavorito] = useState([])\r\n\r\n    return (\r\n        <FavoritosContext.Provider\r\n            value={{ favorito, setFavorito }}>\r\n            {children}\r\n        </FavoritosContext.Provider>\r\n    )\r\n}\r\n\r\n//encapsula a lógica de gerenciamento dos favoritos\r\nexport function useFavoritoContext() {\r\n    //puxando o favortio e set favorito com o useContext\r\n    const { favorito, setFavorito } = useContext(FavoritosContext)\r\n    function adicionarFavorito(novoFavorito) {\r\n        //verificando se há algum repetido\r\n        const favoritoRepetido = favorito.some(item => item.id === novoFavorito.id)\r\n\r\n        //cópia da lista atual para evitar as mudanças diretas\r\n        let novaLista = [...favorito]\r\n\r\n        //adiciona um item\r\n        if (!favoritoRepetido) {\r\n            novaLista.push(novoFavorito)\r\n            return setFavorito(novaLista)\r\n        }\r\n\r\n        //se o item está na lista \"favoritoRepetido\" ele é removido da lista\r\n        novaLista.splice(\r\n            novaLista.findIndex(\r\n                item => item.id === novaLista.find(item => item.id === novoFavorito.id).id\r\n            ),\r\n            1\r\n        )\r\n        return setFavorito(novaLista)\r\n    }\r\n\r\n    //retorna um objeto contendo a lista de favoritos e a função de adicionarFavorito\r\n    return {\r\n        favorito,\r\n        adicionarFavorito\r\n    }\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAE3D;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,CAAC;AAC/CK,gBAAgB,CAACC,WAAW,GAAG,WAAW;;AAE1C;AACA,eAAe,SAASC,iBAAiBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,oBACIE,OAAA,CAACC,gBAAgB,CAACO,QAAQ;IACtBC,KAAK,EAAE;MAAEH,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EAChCA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEpC;;AAEA;AAAAR,EAAA,CAXwBF,iBAAiB;AAAAW,EAAA,GAAjBX,iBAAiB;AAYzC,OAAO,SAASY,kBAAkBA,CAAA,EAAG;EAAAC,GAAA;EACjC;EACA,MAAM;IAAEV,QAAQ;IAAEC;EAAY,CAAC,GAAGV,UAAU,CAACI,gBAAgB,CAAC;EAC9D,SAASgB,iBAAiBA,CAACC,YAAY,EAAE;IACrC;IACA,MAAMC,gBAAgB,GAAGb,QAAQ,CAACc,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,CAAC;;IAE3E;IACA,IAAIC,SAAS,GAAG,CAAC,GAAGjB,QAAQ,CAAC;;IAE7B;IACA,IAAI,CAACa,gBAAgB,EAAE;MACnBI,SAAS,CAACC,IAAI,CAACN,YAAY,CAAC;MAC5B,OAAOX,WAAW,CAACgB,SAAS,CAAC;IACjC;;IAEA;IACAA,SAAS,CAACE,MAAM,CACZF,SAAS,CAACG,SAAS,CACfL,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKC,SAAS,CAACI,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,YAAY,CAACI,EAAE,CAAC,CAACA,EAC5E,CAAC,EACD,CACJ,CAAC;IACD,OAAOf,WAAW,CAACgB,SAAS,CAAC;EACjC;;EAEA;EACA,OAAO;IACHjB,QAAQ;IACRW;EACJ,CAAC;AACL;AAACD,GAAA,CA/BeD,kBAAkB;AAAA,IAAAD,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}